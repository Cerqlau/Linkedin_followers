# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.    Do not edit this file unless you know what you are doing.


from concurrent.futures import thread
from PyQt5 import QtCore, QtGui, QtWidgets
from linkedinbot import LinkedinAPI
from colorama import Fore
from datetime import datetime
from configparser import ConfigParser
import imagens_rc
import sys,time,json,os


class Ui_MainWindow(object):

    def __init__(self) -> None:
        self._texto=""
        self._texto_raw=""
        self.parar= 0
        self.config2 = ConfigParser()
        self.config2.read('example.ini') 
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(404, 264)
        MainWindow.setMinimumSize(QtCore.QSize(404, 270))
        MainWindow.setMaximumSize(QtCore.QSize(404, 270))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        MainWindow.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/imagem.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 111, 209, 255), stop:1 rgba(255, 255, 255, 255));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_logs = QtWidgets.QFrame(self.centralwidget)
        self.frame_logs.setGeometry(QtCore.QRect(10, 0, 386, 508))
        self.frame_logs.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_logs.setStyleSheet("")
        self.frame_logs.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_logs.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_logs.setObjectName("frame_logs")
        self.frame_config = QtWidgets.QFrame(self.frame_logs)
        self.frame_config.setGeometry(QtCore.QRect(0, 0, 386, 200))
        self.frame_config.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_config.setMaximumSize(QtCore.QSize(16777215, 200))
        self.frame_config.setStyleSheet("")
        self.frame_config.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_config.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_config.setObjectName("frame_config")
        self.frame_container_info = QtWidgets.QFrame(self.frame_config)
        self.frame_container_info.setGeometry(QtCore.QRect(10, 40, 231, 161))
        self.frame_container_info.setStyleSheet("background-color: none;")
        self.frame_container_info.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_container_info.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_container_info.setLineWidth(0)
        self.frame_container_info.setObjectName("frame_container_info")
        self.label_loguin = QtWidgets.QLabel(self.frame_container_info)
        self.label_loguin.setGeometry(QtCore.QRect(10, 10, 51, 31))
        self.label_loguin.setStyleSheet("background-color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:1.3px;\n""border-color: rgb(0,0,0)")
        self.label_loguin.setAlignment(QtCore.Qt.AlignCenter)
        self.label_loguin.setObjectName("label_loguin")
        self.label_id = QtWidgets.QLabel(self.frame_container_info)
        self.label_id.setGeometry(QtCore.QRect(10, 50, 51, 31))
        self.label_id.setStyleSheet("background-color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:1.3px;\n""border-color: rgb(0,0,0)")
        self.label_id.setAlignment(QtCore.Qt.AlignCenter)
        self.label_id.setObjectName("label_id")
        self.label_senha = QtWidgets.QLabel(self.frame_container_info)
        self.label_senha.setGeometry(QtCore.QRect(10, 90, 51, 31))
        self.label_senha.setStyleSheet("background-color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:1.3px;\n""border-color: rgb(0,0,0)")
        self.label_senha.setAlignment(QtCore.Qt.AlignCenter)
        self.label_senha.setObjectName("label_senha")
        self.lineEdit_loguin = QtWidgets.QLineEdit(self.frame_container_info)
        self.lineEdit_loguin.setGeometry(QtCore.QRect(70, 10, 151, 31))
        self.lineEdit_loguin.setStyleSheet("background-color: rgb(255, 255, 255);\n""border: rgb(0, 0, 0)")
        self.lineEdit_loguin.setObjectName("lineEdit_loguin")
        self.lineEdit_ID = QtWidgets.QLineEdit(self.frame_container_info)
        self.lineEdit_ID.setGeometry(QtCore.QRect(70, 50, 151, 31))
        self.lineEdit_ID.setStyleSheet("background-color: rgb(255, 255, 255);\n""border: rgb(0, 0, 0)")
        self.lineEdit_ID.setText("")
        self.lineEdit_ID.setObjectName("lineEdit_ID")
        self.lineEdit_senha = QtWidgets.QLineEdit(self.frame_container_info)
        self.lineEdit_senha.setGeometry(QtCore.QRect(70, 90, 151, 31))
        self.lineEdit_senha.setStyleSheet("background-color: rgb(255, 255, 255);\n""border: rgb(0, 0, 0)")
        self.lineEdit_senha.setText("")
        self.lineEdit_senha.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_senha.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_senha.setObjectName("lineEdit_senha")
        self.checkBox_lembrar_senha = QtWidgets.QCheckBox(self.frame_container_info)
        self.checkBox_lembrar_senha.setGeometry(QtCore.QRect(0, 130, 171, 21))
        self.checkBox_lembrar_senha.setChecked(False)
        self.checkBox_lembrar_senha.setAutoRepeat(False)
        self.checkBox_lembrar_senha.setObjectName("checkBox_lembrar_senha")
        self.radioButton_adicionar = QtWidgets.QRadioButton(self.frame_config)
        self.radioButton_adicionar.setGeometry(QtCore.QRect(260, 10, 121, 21))
        self.radioButton_adicionar.setStyleSheet("background-color: none;")
        self.radioButton_adicionar.setObjectName("radioButton_adicionar")
        self.lineEdit_adicionar = QtWidgets.QLineEdit(self.frame_config)
        self.lineEdit_adicionar.setEnabled(True)
        self.lineEdit_adicionar.setGeometry(QtCore.QRect(260, 40, 71, 31))
        self.lineEdit_adicionar.setStyleSheet("background-color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:1.3px;\n""border-color: rgb(0,0,0)")
        self.lineEdit_adicionar.setObjectName("lineEdit_adicionar")
        self.lineEdit_timing = QtWidgets.QLineEdit(self.frame_config)
        self.lineEdit_timing.setEnabled(True)
        self.lineEdit_timing.setGeometry(QtCore.QRect(260, 100, 111, 31))
        self.lineEdit_timing.setStyleSheet("background-color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:1.3px;\n""border-color: rgb(0,0,0)")
        self.lineEdit_timing.setText("")
        self.lineEdit_timing.setObjectName("lineEdit_timing")
        self.radioButton_remover = QtWidgets.QRadioButton(self.frame_config)
        self.radioButton_remover.setGeometry(QtCore.QRect(260, 76, 121, 21))
        self.radioButton_remover.setStyleSheet("background-color: none;")
        self.radioButton_remover.setCheckable(True)
        self.radioButton_remover.setChecked(False)
        self.radioButton_remover.setObjectName("radioButton_remover")
        self.pushButton_conectar = QtWidgets.QPushButton(self.frame_config)
        self.pushButton_conectar.setGeometry(QtCore.QRect(260, 140, 75, 23))
        self.pushButton_conectar.setStyleSheet("background-color: rgb(152, 152, 152);\n""color: rgb(255, 255, 255);")
        self.pushButton_conectar.setObjectName("pushButton_conectar")
        self.pushButton_conectar_2 = QtWidgets.QPushButton(self.frame_config)
        self.pushButton_conectar_2.setGeometry(QtCore.QRect(260, 170, 75, 23))
        self.pushButton_conectar_2.setStyleSheet("background-color: rgb(64, 194, 95);\n""color: rgb(255, 255, 255);")
        self.pushButton_conectar_2.setObjectName("pushButton_conectar_2")
        self.pushButton_conectar_3 = QtWidgets.QPushButton(self.frame_config)
        self.pushButton_conectar_3.setGeometry(QtCore.QRect(340, 140, 41, 51))
        self.pushButton_conectar_3.setAutoFillBackground(False)
        self.pushButton_conectar_3.setStyleSheet("background-color: rgb(255, 0, 0);\n""color: rgb(255, 255, 255);")
        self.pushButton_conectar_3.setObjectName("pushButton_conectar_3")
        self.label_loguin_2 = QtWidgets.QLabel(self.frame_config)
        self.label_loguin_2.setGeometry(QtCore.QRect(0, 0, 251, 51))
        self.label_loguin_2.setStyleSheet("background-color: none;\n""color: rgb(255, 255, 255);\n""border-style:solid;\n""border-width:0px;\n""border-color: rgb(0,0,0);\n""font: 75 14pt \"MV Boli\";\n""")
        self.label_loguin_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_loguin_2.setObjectName("label_loguin_2")
        self.label_createdby = QtWidgets.QLabel(self.frame_logs)
        self.label_createdby.setGeometry(QtCore.QRect(20, 220, 341, 41))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_createdby.setFont(font)
        self.label_createdby.setStyleSheet("background-color: none;\n""color: rgb(194, 0, 0);\n""")
        self.label_createdby.setAlignment(QtCore.Qt.AlignCenter)
        self.label_createdby.setObjectName("label_createdby")
        self.checkBox_automatico = QtWidgets.QCheckBox(self.frame_logs)
        self.checkBox_automatico.setGeometry(QtCore.QRect(10, 200, 81, 21))
        self.checkBox_automatico.setStyleSheet("background-color: none;")
        self.checkBox_automatico.setChecked(False)
        self.checkBox_automatico.setAutoRepeat(False)   
        self.checkBox_automatico.setObjectName("checkBox_automatico")
        self.lineEdit_automatico = QtWidgets.QLineEdit(self.frame_logs)
        self.lineEdit_automatico.setGeometry(QtCore.QRect(90, 200, 81, 21))
        self.lineEdit_automatico.setStyleSheet("background-color: rgb(255, 255, 255);\n""border: rgb(0, 0, 0)")
        self.lineEdit_automatico.setText("")
        self.lineEdit_automatico.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_automatico.setObjectName("lineEdit_automatico")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Condição inicial dos botões
        self.pushButton_conectar_2.setEnabled(False)
        self.pushButton_conectar_3.setEnabled(False)

        #Link de envio do interface para o código
        self.pushButton_conectar.clicked.connect(lambda: self.conectar())
        self.pushButton_conectar_2.clicked.connect(lambda: self.inciciar())
        self.pushButton_conectar_3.clicked.connect(lambda:self.quit())
        self.checkBox_lembrar_senha.clicked.connect(lambda:self.captura_check_checkbox(self.checkBox_lembrar_senha.checkState()))

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        #chamada da API Linkedin
        self.API = LinkedinAPI()
               
        #limpar log
        os.system('cls' if os.name == 'nt' else 'clear')
        
        #carregar senhas se a ultima checkbox foi acionada
        self.carregar_senhas()
        if self.lastcheckbox == 'True':
            self.lineEdit_loguin.setText(self._login)
            self.lineEdit_ID.setText(self._id)
            self.lineEdit_senha.setText(self._senha)
            self.checkBox_lembrar_senha.setChecked(True)
            self._checkbox=2
        else:
            self.checkBox_lembrar_senha.setChecked(False)
            self._checkbox=0
        
    #captura estado após o click
    def captura_check_checkbox(self,check):
        self._checkbox=check
        if self._checkbox ==2:
            return self._checkbox
    
    #repassa estado
    def check_checkbox(self):
        return self._checkbox

    def retranslateUi(self, MainWindow):
      _translate = QtCore.QCoreApplication.translate
      MainWindow.setWindowTitle(_translate("MainWindow", "Followers Automation for Linkedin"))
      self.label_loguin.setText(_translate("MainWindow", "Loguin"))
      self.label_id.setText(_translate("MainWindow", "ID"))
      self.label_senha.setText(_translate("MainWindow", "Password"))
      self.lineEdit_loguin.setPlaceholderText(_translate("MainWindow", "Insira seu loguin do Linkedin"))
      self.lineEdit_ID.setPlaceholderText(_translate("MainWindow", "www.linkedin.com/nome-xxxxxx/"))
      self.lineEdit_senha.setPlaceholderText(_translate("MainWindow", "Insira sua senha"))
      self.checkBox_lembrar_senha.setText(_translate("MainWindow", "Lembrar dados para Login"))
      self.radioButton_adicionar.setText(_translate("MainWindow", "Adicionar perfil"))
      self.lineEdit_adicionar.setPlaceholderText(_translate("MainWindow", "Quantidade"))
      self.lineEdit_timing.setPlaceholderText(_translate("MainWindow", "semanas,meses"))
      self.radioButton_remover.setText(_translate("MainWindow", "Remover solicitação"))
      self.pushButton_conectar.setText(_translate("MainWindow", "Conectar"))
      self.pushButton_conectar_2.setText(_translate("MainWindow", "Iniciar"))
      self.pushButton_conectar_3.setText(_translate("MainWindow", "Parar"))
      self.label_loguin_2.setText(_translate("MainWindow", "LINKEDIN\n""Organic Followers"))
      self.label_createdby.setText(_translate("MainWindow", "  Created by \n""instagram profile: @laurocerqueira\n""linkedin: www.linkedin.com/in/lauro-cerqueira-70473568/ "))
      self.checkBox_automatico.setText(_translate("MainWindow", "Automático"))
      self.lineEdit_automatico.setPlaceholderText(_translate("MainWindow", "   HH:MM:SS"))
     
        
    def quit(self):
        self.parar=self.parar+1
        try:
            if self.parar<2:
                self.pushButton_conectar_2.setEnabled(True)
                self.pushButton_conectar.setEnabled(True)
                self.API.quit()
                print (Fore.LIGHTRED_EX+'\nOperação encerrada pelo usuário\n'+Fore.RESET)
                print (Fore.LIGHTRED_EX+'Necessário conectar novamente\n'+Fore.RESET)
                msg = 'Operação encerrada pelo usuário'
                self.API.log(msg)
            else:
                print (Fore.LIGHTRED_EX+'\nPrograma finalizado pelo usuário\n'+Fore.RESET)
                print (Fore.LIGHTRED_EX+'Necessário conectar novamente\n'+Fore.RESET)
                msg = 'Programa encerrado  pelo usuário'
                self.API.log(msg)
                sys.exit(app.exec_())
        except:
            try:
                if self.parar<2:
                    self.pushButton_conectar_2.setEnabled(True)
                    self.pushButton_conectar.setEnabled(True)
                    self.API.quit()
                    print (Fore.LIGHTRED_EX+'\nOperação encerrada pelo usuário\n'+Fore.RESET)
                    print (Fore.LIGHTRED_EX+'Necessário conectar novamente\n'+Fore.RESET)
                    msg = 'Operação encerrada pelo usuário'
                    self.API.log(msg)
                else:
                    os.system('cls' if os.name == 'nt' else 'clear')
                    print (Fore.LIGHTRED_EX+'\nPrograma finalizado pelo usuário\n'+Fore.RESET)
                    msg = 'Programa encerrado  pelo usuário'
                    self.API.log(msg)
                    sys.exit(app.exec_())
            except:
                os.system('cls' if os.name == 'nt' else 'clear')
                print (Fore.LIGHTRED_EX+'\nPrograma finalizado pelo usuário\n'+Fore.RESET)
                msg = 'Programa encerrado  pelo usuário'
                self.API.log(msg)
                sys.exit(app.exec_())
            
    def carregar_senhas(self):
        with open("example.json", "r") as f:
            self.config = json.load(f)
        f.close()
        self._senha= self.config['Password']
        self._login = self.config['Login']
        self._data_alvo= self.config['Horario_de_execucao']
        self._id = self.config['id']
        self._headless=False if self.config['headless'] == 'False' else True
        self.lastcheckbox = self.config['lastcheckbox']

    def salvar_senhas(self,login,senha,data_alvo,id,lastcheckbox,headless):
        arquivo = {"Login":login,"Password":senha,"Horario_de_execucao":data_alvo,"id":id,"headless":headless,"lastcheckbox":lastcheckbox}
        with open("example.json", "w") as f:
            json.dump(arquivo,f,indent='',ensure_ascii = False)

    def conectar(self):
        self.parar=0
        loguin = self.lineEdit_loguin.text()
        id= self.lineEdit_ID.text()
        senha = self.lineEdit_senha.text()
        data_alvo = self.lineEdit_automatico.text()
        if loguin == '' or id == '' or senha =='':
            print(Fore.LIGHTRED_EX+'\nRevise a entrada de dados todos os campos: login, id, senha;\nnecessitam ser preenchidos para posssibiliar a conexão'+Fore.RESET)
            msg='Revise a entrada de dados todos os campos: login, id, senha;\nnecessitam ser preenchidos para posssibiliar a conexão'
            self.API.log(msg)
        else:
            print('\nIniciando conexão.....')
            msg='Iniciando conexão.....'
            self.logging(self.API.log(msg))
            self.lineEdit_loguin.setEnabled(False)
            self.lineEdit_ID.setEnabled(False)
            self.lineEdit_senha.setEnabled(False)
            self.pushButton_conectar.setEnabled(False)
            self.estado_connect=self.API.connect(loguin,senha,id,self._headless)
            self.pushButton_conectar_2.setEnabled(True)
            self.pushButton_conectar_3.setEnabled(True)
            if self.check_checkbox() == 2:
                lastcheckbox ="True"
                self.salvar_senhas(loguin,senha,data_alvo,id,lastcheckbox,str(self._headless))
            elif self.check_checkbox() == 0:
                lastcheckbox ="False"
                data_alvo=''
                loguin=''
                id=''
                senha=''
                self.salvar_senhas(loguin,senha,data_alvo,id,lastcheckbox,str(self._headless))
        
    def inciciar(self):
        self.parar=0
        _quantidade=self.lineEdit_adicionar.text()
        _quantidade=0 if self.lineEdit_adicionar.text() =='' else _quantidade
        _timming=self.lineEdit_timing.text()
        _timming='vazio' if self.lineEdit_timing.text() =='' else _timming
        c = self.radioButton_adicionar.isChecked()
        d = self.radioButton_remover.isChecked()
        
        if self.checkBox_automatico.isChecked():
            if c == False and d == False:
                print('\nSelecione ao menos uma operação\n')
                msg = 'Selecione ao menos uma operação'
                self.API.log(msg)
            else:
                if c == True:
                    if int(_quantidade) > 0:
                        self.pushButton_conectar_2.setEnabled(False)
                        self.automatico(_quantidade)
                    else:
                        print('\nInsira um numero maior que "0"')
                        msg = 'Insira um numero maior que "0"'
                        self.API.log(msg)
        else:
            if c == False and d == False:
                print('\nSelecione ao menos uma operação\n')
                msg = 'Selecione ao menos uma operação'
                self.API.log(msg)
            else:
                if c == True:
                    if int(_quantidade) > 0:
                        print('\nIniciando adição de usuários')
                        self.pushButton_conectar_2.setEnabled(False)
                        self.API.adicionar(int(_quantidade))
                    else:
                        print('\nInsira um numero maior que "0"')
                        msg = 'Insira um numero maior que "0"'
                        self.API.log(msg)
                        
                if d == True:
                    if _timming =='semanas' or _timming=='meses':
                        if int(_quantidade) > 0:
                            print('\nIniciando remoção de solicitações antigas')
                            self.pushButton_conectar_2.setEnabled(False)
                            self.API.remover(_timming,_quantidade)
                        else:
                            print('\nInsira um numero maior que "0"')
                            msg = 'Insira um numero maior que "0"'
                            self.API.log(msg)
                    else:
                        print('\nInsira a quantidade de tempo estipulada: "semanas" ou "meses"')
                        msg = 'Insira a quantidade de tempo estipulada: "semanas" ou "meses"'
                        self.API.log(msg)

    def automatico(self,quantidade):
        hora_estipulada= self.lineEdit_automatico.text()
        data_mem = self.config2['executable']['utilizado']
        while True:
            while True:    
                data_hora = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                data_atual = datetime.now().strftime('%d/%m/%Y')
                data_min = datetime.now().strftime( '%H:%M:%S')
                
                print(data_hora,' Aguardando ...', end='\x1b[K\r')
                if data_min >= hora_estipulada and data_atual != data_mem :
                    data_mem = datetime.now().strftime('%d/%m/%Y')
                    break
                time.sleep(0.5)
            try:
                self.API.adicionar(int(quantidade))
            except KeyboardInterrupt:
                print('\nComando automático interrompido pelo usuário\n')
                msg = 'Comando automático interrompido pelo usuário'
                self.API.log(msg)
                

if __name__ == "__main__":
    try:
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
    except:
        pass
    sys.exit(app.exec_())
    
 
